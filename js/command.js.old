const repeatPatternRegExp = /repeat ([0-9]+) \[([a-z0-9\[\]; ]+)\]/

class Command {
    constructor(text) {
        this.text = text
        this.parse()
    }

    parse() {
        let repeatCheck = this.text.match(repeatPatternRegExp)
        
        if (repeatCheck == null) {
            this.type = "simple"
            let parts = this.text.split(" ")
            this.opcode = parts[0]

            if (parts.length >= 2) {
                this.subtype = "diadic"
                this.amount = parts[1]
            }
            else {
                this.subtype = "monadic"
            }
        }

        else {
            this.type = "repeat"
            this.count = repeatCheck[1]
            this.block = repeatCheck[2].split(';').map(
                text => new Command(text.trim())
            )
        }
    }


    execute() {
        if (this.type == "simple") {
            if (this.subtype == "monadic") {
                if (this.opcode in monadicCommands) {
                    monadicCommands[this.opcode]()
                } else {
                    raiseError(`Unknown command ${this.text} with no argument`)
                }
            }

            if (this.subtype == "diadic") {
                if (this.opcode in diadicCommands) {
                    diadicCommands[this.opcode](this.amount)
                } else {
                    raiseError(`Unexpected command ${this.text}`)
                }
            }
        }

        if (this.type == "repeat") {
            for (let i = 0; i < this.count; i++) {
                this.block.forEach(commandItem => {commandItem.execute()});
            }
        }
    }
}


function execute() {
    let commandTop = new Command(command.value)
    commandTop.execute()
}